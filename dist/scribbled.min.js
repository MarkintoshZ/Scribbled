var scribbled=function(t){"use strict";class e{constructor(t){this._canvas=document.createElement("canvas"),this._context=this._canvas.getContext("2d"),this._canvas.style.padding="0",this._canvas.style.margin="0",this._canvas.style.background="transparent",this._canvas.style.width=t.width+"px",this._canvas.style.height=t.height+"px";const e=window.devicePixelRatio;this._canvas.width=Math.floor(t.width*e),this._canvas.height=Math.floor(t.height*e),this._context.scale(e,e),this.canvasCtx.imageSmoothingEnabled=t.antialiased,this._pixelRatio=window.devicePixelRatio,this._width=t.width,this._height=t.height}getCanvas(){return this._canvas}get canvasCtx(){return this._context}getPixelRatio(){return this._pixelRatio}get width(){return this._width}set width(t){this._width=this._canvas.width=t*this._pixelRatio,this._canvas.style.width=t+"px";const e=this._pixelRatio;this.canvasCtx.scale(e,e)}get height(){return this._height}set height(t){this._height=this._canvas.height=t*this._pixelRatio,this._canvas.style.height=t+"px";const e=this._pixelRatio;this.canvasCtx.scale(e,e)}setSize(t,e){this.width=t||this.width,this.height=e||this.height}toDataURL(t,e){try{return this._canvas.toDataURL(t,e)}catch(t){try{return this._canvas.toDataURL()}catch(t){return""}}}attachDom(t){t.appendChild(this.getCanvas())}}var s;!function(t){t.Brush="BRUSH",t.Eraser="ERASER"}(s||(s={}));class i{constructor(t=[{type:s.Brush,color:"#000",size:1,pressureSensitivity:50,triggerKey:"Shift+KeyP"},{type:s.Eraser,triggerKey:"Shift+KeyE"}]){this.selectedIdx=0,this.tools=t}setToolByIdx(t){this.selectedIdx=t}setToolByType(t){this.selectedIdx=this.tools.findIndex((e=>e.type.valueOf()==t))}get selectedTool(){return this.tools[this.selectedIdx]}}class o{constructor(t,e){this.topLeft=t,this.bottomRight=e}overlap(t){return this.topLeft.x<=t.bottomRight.x&&this.bottomRight.x>=t.topLeft.x&&this.topLeft.y<=t.bottomRight.y&&this.bottomRight.y>=t.topLeft.y}get width(){return this.bottomRight.x-this.topLeft.x}get height(){return this.topLeft.y-this.bottomRight.y}}class h{constructor(){this.strokes=new Map}add(t){if(this.strokes.has(t.hitColor))throw new Error(`Stroke with hitColor ${t.hitColor} already exists`);this.set(t)}delete(t){this.strokes.delete(t)}set(t){this.strokes.set(t.hitColor,t)}checkOverlap(t){for(const e of this.strokes.values())if(e.aabb.overlap(t))return!0}getOverlap(t){return[...this.strokes.values()].filter((e=>e.aabb.overlap(t)))}genHitColor(){let t;do{t="#"+Math.floor(16777215*Math.random()).toString(16)}while(this.strokes.has(t));return t}}class r{strokeContinue(t,e,s){if(!this.stroke)return;this.stroke.x.push(t),this.stroke.y.push(e),this.stroke.pressure.push(s);const i=this.stroke.x.length;return{x:this.stroke.x[i-2],y:this.stroke.y[i-2],pressure:this.stroke.pressure[i-2],color:this.stroke.color,hitColor:this.stroke.hitColor}}strokeStart({x:t,y:e,pressure:s,color:i,hitColor:o}){this.stroke={x:[t],y:[e],pressure:[s],color:i,hitColor:o,aabb:null}}strokeComplete(){if(null===this.stroke)throw new Error("Cannot complete stroke before stroke start is called");this.stroke.aabb=new o({x:Math.min(...this.stroke.x),y:Math.min(...this.stroke.y)},{x:Math.max(...this.stroke.x),y:Math.max(...this.stroke.y)});const t=this.stroke;return this.stroke=null,t}}class n{constructor(t,e,s,i){this.canvas=t,this.renderer=e,this.boardData=s,this.toolBox=i,this.toolDown=!1,this.strokeConstructor=new r,this.canvas.addEventListener("pointerdown",this.handlePointerDown.bind(this)),this.canvas.addEventListener("pointerup",this.handlePointerUpAndLeave.bind(this)),this.canvas.addEventListener("pointermove",this.handlePointerMove.bind(this)),this.canvas.addEventListener("pointerleave",this.handlePointerUpAndLeave.bind(this))}dispose(){this.canvas.removeEventListener("pointerdown",this.handlePointerDown.bind(this)),this.canvas.removeEventListener("pointerup",this.handlePointerUpAndLeave.bind(this)),this.canvas.removeEventListener("pointermove",this.handlePointerMove.bind(this)),this.canvas.removeEventListener("pointerleave",this.handlePointerUpAndLeave.bind(this))}handlePointerDown(t){if(this.toolDown=!0,this.currentTool=this.toolBox.selectedTool,this.currentTool.type===s.Eraser)return this.erase(t.offsetX,t.offsetY);const e=this.createPoint(t);this.strokeConstructor.strokeStart(e),this.renderer.strokeStart(e)}handlePointerMove(t){if(!this.toolDown)return;if(this.currentTool.type===s.Eraser)return this.erase(t.offsetX,t.offsetY);const e=this.strokeConstructor.strokeContinue(t.offsetX,t.offsetY,this.calculatePressure(t.pressure)),i=this.createPoint(t,e.hitColor);this.renderer.strokeContinue(i,e)}handlePointerUpAndLeave(t){this.toolDown&&(this.handlePointerMove(t),this.toolDown=!1,this.currentTool=null,this.boardData.add(this.strokeConstructor.strokeComplete()))}erase(t,e){}createPoint(t,e){return{x:t.offsetX,y:t.offsetY,pressure:this.calculatePressure(t.pressure),color:this.currentTool.color,hitColor:e||this.boardData.genHitColor()}}calculatePressure(t){return t*this.currentTool.pressureSensitivity+this.currentTool.size}}class a{constructor(t,e){this.canvasCtx=t,this.hitCanvasCtx=e}strokeStart(t){this.drawCircle(this.canvasCtx,t.color,t),this.drawCircle(this.hitCanvasCtx,t.hitColor,t)}drawCircle(t,e,s){t.fillStyle=e,t.beginPath(),t.ellipse(s.x,s.y,s.pressure,s.pressure,0,0,2*Math.PI),t.closePath(),t.fill()}strokeContinue(t,e){this.paintLine(this.canvasCtx,t.x,t.y,t.pressure,e.x,e.y,e.pressure,t.color),this.paintLine(this.hitCanvasCtx,t.x,t.y,t.pressure,e.x,e.y,e.pressure,t.hitColor)}paintLine(t,e,s,i,o,h,r,n){t.fillStyle=n;const a=Math.atan((s-h)/(e-o));t.beginPath(),t.moveTo(Math.cos(a+Math.PI/2)*r+o,Math.sin(a+Math.PI/2)*r+h),t.lineTo(Math.cos(a-Math.PI/2)*r+o,Math.sin(a-Math.PI/2)*r+h),t.lineTo(Math.cos(a-Math.PI/2)*i+e,Math.sin(a-Math.PI/2)*i+s),t.lineTo(Math.cos(a+Math.PI/2)*i+e,Math.sin(a+Math.PI/2)*i+s),t.closePath(),t.fill(),t.beginPath(),t.arc(e,s,i-.1,0,2*Math.PI),t.closePath(),t.fill()}strokeRender(t){}}class l{constructor(t){this.toolBox=t,document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("keyup",this.handleKeyUp.bind(this))}dispose(){document.removeEventListener("keydown",this.handleKeyDown.bind(this)),document.removeEventListener("keyup",this.handleKeyUp.bind(this))}handleKeyDown(t){}handleKeyUp(t){this.toolBox.tools.forEach(((e,s)=>{if(e.triggerKey){const i=e.triggerKey.split("+").map((t=>t.trim())),o=i[i.length-1],h=i.includes("Ctrl"),r=i.includes("Shift"),n=i.includes("Option")||i.includes("Alt");console.log({e:t,key:o,ctrl:h,shift:r,option:n}),t.code===o&&t.ctrlKey===h&&t.shiftKey===r&&t.altKey===n&&(this.toolBox.setToolByIdx(s),console.log(`set tool to ${this.toolBox.selectedTool}`))}}))}}class c{constructor({container:t,width:s=640,height:o=400}){const r="string"==typeof t?document.getElementById(t):t;if(!r)throw Error(`Invalid argument: container = ${t}`);this.width=s,this.height=o,this.canvasContainer=document.createElement("div"),this.canvasContainer.style.cursor="crosshair",r.appendChild(this.canvasContainer),this.canvas=new e({width:s,height:o}),this.hitCanvas=new e({width:s,height:o,antialiased:!1}),this.canvas.attachDom(this.canvasContainer),this.hitCanvas.attachDom(this.canvasContainer),this.toolBox=new i,this.boardData=new h,this.canvasController=new n(this.canvas.getCanvas(),new a(this.canvas.canvasCtx,this.hitCanvas.canvasCtx),this.boardData,this.toolBox),this.toolBoxController=new l(this.toolBox)}dispose(){this.canvasController.dispose(),this.toolBoxController.dispose()}getHeight(){return this.height}getWidth(){return this.width}}return t.Board=c,t.default=c,Object.defineProperty(t,"__esModule",{value:!0}),t}({});
